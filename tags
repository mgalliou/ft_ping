!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARFLAGS	libft/Makefile	/^ARFLAGS			=	rc$/;"	m
BUF	libft/src/get_next_line/get_next_line.h	/^# define BUF /;"	d
BUFF_SIZE	libft/src/ft_printf/ft_printf.h	/^# define BUFF_SIZE /;"	d
BUFF_SIZE	libft/src/get_next_line/get_next_line.h	/^# define BUFF_SIZE /;"	d
CBLACK	libft/Makefile	/^CBLACK		=	$(ESC)[30;1m$/;"	m
CBLACK	libft/test/Makefile	/^CBLACK		=	$(ESC)[30;1m$/;"	m
CBLUE	libft/Makefile	/^CBLUE		=	$(ESC)[34;1m$/;"	m
CBLUE	libft/test/Makefile	/^CBLUE		=	$(ESC)[34;1m$/;"	m
CC	Makefile	/^CC       = gcc$/;"	m
CC	libft/Makefile	/^CC				=	gcc$/;"	m
CC	libft/test/Makefile	/^CC			=	gcc$/;"	m
CCYAN	libft/Makefile	/^CCYAN		=	$(ESC)[36;1m$/;"	m
CCYAN	libft/test/Makefile	/^CCYAN		=	$(ESC)[36;1m$/;"	m
CFLAGS	Makefile	/^CFLAGS   = -Wall -Wextra -Werror$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS			=	-Wall -Wextra -Werror$/;"	m
CFLAGS	libft/test/Makefile	/^CFLAGS		=	-Wall -Wextra -Werror$/;"	m
CFLAGS	libft/test/Makefile	/^debug: CFLAGS := $(CFLAGS) $(CFLAGS_DEBUG)$/;"	m
CFLAGS_DEBUG	libft/test/Makefile	/^CFLAGS_DEBUG =	-g -fsanitize=address$/;"	m
CGREEN	libft/Makefile	/^CGREEN		=	$(ESC)[32;1m$/;"	m
CGREEN	libft/test/Makefile	/^CGREEN		=	$(ESC)[32;1m$/;"	m
CHEAD	libft/Makefile	/^CHEAD			=	"$(CBLUE)$(HEAD)$(CRESET)"$/;"	m
CMAGENTA	libft/Makefile	/^CMAGENTA	=	$(ESC)[35;1m$/;"	m
CMAGENTA	libft/test/Makefile	/^CMAGENTA	=	$(ESC)[35;1m$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = -Ilibft\/include$/;"	m
CPPFLAGS	libft/Makefile	/^CPPFLAGS		=	-I$(INC_DIR)$/;"	m
CPPFLAGS	libft/test/Makefile	/^CPPFLAGS	=	$(foreach dir,$(INC_DIR),-I$(dir))$/;"	m
CRED	libft/Makefile	/^CRED		=	$(ESC)[31;1m$/;"	m
CRED	libft/test/Makefile	/^CRED		=	$(ESC)[31;1m$/;"	m
CRESET	libft/Makefile	/^CRESET		=	$(ESC)[m$/;"	m
CRESET	libft/test/Makefile	/^CRESET		=	$(ESC)[m$/;"	m
CWHITE	libft/Makefile	/^CWHITE		=	$(ESC)[37;1m$/;"	m
CWHITE	libft/test/Makefile	/^CWHITE		=	$(ESC)[37;1m$/;"	m
CYELLOW	libft/Makefile	/^CYELLOW		=	$(ESC)[33;1m$/;"	m
CYELLOW	libft/test/Makefile	/^CYELLOW		=	$(ESC)[33;1m$/;"	m
ESC	libft/Makefile	/^ESC			=	\\033$/;"	m
ESC	libft/test/Makefile	/^ESC			=	\\033$/;"	m
FD	libft/src/get_next_line/get_next_line.h	/^# define FD /;"	d
FT_PRINTF_H	libft/src/ft_printf/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
GET_NEXT_LINE_H	libft/src/get_next_line/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
HEAD	libft/Makefile	/^HEAD			=	[ $(NAME) ]$/;"	m
INC	Makefile	/^INC      = $(addprefix $(INC_DIR)\/,$(INC_NAME))$/;"	m
INC	libft/Makefile	/^INC				=	$(addprefix $(INC_DIR)\/, $(INC_NAME))$/;"	m
INC_DIR	libft/Makefile	/^INC_DIR			=	include$/;"	m
INC_DIR	libft/test/Makefile	/^INC_DIR		=	include ..\/include libftest\/include$/;"	m
INC_NAME	Makefile	/^INC_NAME =$/;"	m
INC_NAME	libft/Makefile	/^INC_NAME		=	libft.h$/;"	m
L	libft/src/ft_printf/ft_printf.h	/^	NONE, hh, h, l, ll, j, t, z, q, L$/;"	e	enum:e_lenght
LDFLAGS	Makefile	/^LDFLAGS  = -Llibft$/;"	m
LDFLAGS	libft/test/Makefile	/^LDFLAGS		=	$(foreach dir,$(LIB_DIR),-L$(dir))$/;"	m
LDLIBS	Makefile	/^LDLIBS   = -lft$/;"	m
LDLIBS	libft/test/Makefile	/^LDLIBS		=	-lftest -lft$/;"	m
LIB	Makefile	/^LIB      = libft.a$/;"	m
LIB	libft/test/Makefile	/^LIB			=	$(addprefix $(LIB_DIR)\/,$(LIB_NAME))$/;"	m
LIBFT_H	libft/include/libft.h	/^# define LIBFT_H$/;"	d
LIB_DIR	libft/test/Makefile	/^LIB_DIR		=	libftest ..$/;"	m
NAME	Makefile	/^NAME     = ft_ping$/;"	m
NAME	libft/Makefile	/^NAME			=	libft.a$/;"	m
NAME	libft/test/Makefile	/^NAME		=	test$/;"	m
NONE	libft/src/ft_printf/ft_printf.h	/^	NONE, hh, h, l, ll, j, t, z, q, L$/;"	e	enum:e_lenght
OBJ	Makefile	/^OBJ      = $(addprefix $(OBJ_DIR)\/,$(OBJ_NAME))$/;"	m
OBJ	libft/Makefile	/^OBJ				=	$(addprefix $(OBJ_DIR)\/,$(OBJ_NAME))$/;"	m
OBJ	libft/test/Makefile	/^OBJ			=	$(addprefix $(OBJ_DIR)\/,$(OBJ_NAME))$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR  = obj$/;"	m
OBJ_DIR	libft/Makefile	/^OBJ_DIR			=	obj$/;"	m
OBJ_DIR	libft/test/Makefile	/^OBJ_DIR		=	obj$/;"	m
OBJ_NAME	Makefile	/^OBJ_NAME = $(SRC_NAME:.c=.o)$/;"	m
OBJ_NAME	libft/Makefile	/^OBJ_NAME		=	$(SRC_NAME:.c=.o)$/;"	m
OBJ_NAME	libft/test/Makefile	/^OBJ_NAME	=	$(SRC_NAME:.c=.o)$/;"	m
PROJECT	libft/test/Makefile	/^PROJECT		=	libft.a$/;"	m
RB_BLACK	libft/include/libft.h	/^	RB_BLACK,$/;"	e	enum:e_rb_color
RB_RED	libft/include/libft.h	/^	RB_RED$/;"	e	enum:e_rb_color
RL	libft/Makefile	/^RL				=	ranlib$/;"	m
RM	Makefile	/^RM       = rm -rf$/;"	m
RM	libft/Makefile	/^RM				= 	rm -rf$/;"	m
RM	libft/test/Makefile	/^RM			= 	rm -rf$/;"	m
SRC	Makefile	/^SRC      = $(addprefix $(SRC_DIR)\/,$(SRC_NAME))$/;"	m
SRC	libft/Makefile	/^SRC				=	$(addprefix $(SRC_DIR)\/,$(SRC_NAME))$/;"	m
SRC	libft/test/Makefile	/^SRC			=	$(addprefix $(SRC_DIR)\/,$(SRC_NAME))$/;"	m
SRC_DIR	Makefile	/^SRC_DIR  = src$/;"	m
SRC_DIR	libft/Makefile	/^SRC_DIR			=	src$/;"	m
SRC_DIR	libft/test/Makefile	/^SRC_DIR		=	src$/;"	m
SRC_GNL_DIR	libft/Makefile	/^SRC_GNL_DIR		=	get_next_line$/;"	m
SRC_GNL_NAME	libft/Makefile	/^SRC_GNL_NAME	=	get_next_line.c$/;"	m
SRC_NAME	Makefile	/^SRC_NAME = main.c$/;"	m
SRC_NAME	libft/Makefile	/^SRC_NAME		=	\\$/;"	m
SRC_NAME	libft/test/Makefile	/^SRC_NAME	=	main.c\\$/;"	m
SRC_PTF_DIR	libft/Makefile	/^SRC_PTF_DIR		=	ft_printf$/;"	m
SRC_PTF_NAME	libft/Makefile	/^SRC_PTF_NAME	=	\\$/;"	m
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_10_in_base_10)$/;"	f	file:
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_32_in_base_16)$/;"	f	file:
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_base_contain_sign_1)$/;"	f	file:
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_base_contain_sign_2)$/;"	f	file:
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_base_contain_sign_3)$/;"	f	file:
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_base_is_null)$/;"	f	file:
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_base_len_is_one)$/;"	f	file:
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_base_len_is_zero)$/;"	f	file:
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_duplicate_char_in_base_1)$/;"	f	file:
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_duplicate_char_in_base_2)$/;"	f	file:
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_duplicate_char_in_base_3)$/;"	f	file:
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_minus_10_in_base_10)$/;"	f	file:
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_minus_minus_10_in_base_10)$/;"	f	file:
TEST	libft/test/src/suite_ft_atoi_base.c	/^static TEST(when_minus_plus_minus_plus_10_in_base_10)$/;"	f	file:
TEST	libft/test/src/suite_ft_dlstaddback.c	/^static TEST(when_used_on_list_with_one_item)$/;"	f	file:
TEST	libft/test/src/suite_ft_dlstaddback.c	/^static TEST(when_used_on_list_with_two_item)$/;"	f	file:
TEST	libft/test/src/suite_ft_dlstaddback.c	/^static TEST(when_used_on_null_list_should_be_first_elem)$/;"	f	file:
TEST	libft/test/src/suite_ft_dlstinsert.c	/^static TEST(when_used_on_first_elem_of_two_elem_list)$/;"	f	file:
TEST	libft/test/src/suite_ft_dlstinsert.c	/^static TEST(when_used_on_list_with_one_item)$/;"	f	file:
TEST	libft/test/src/suite_ft_dlstinsert.c	/^static TEST(when_used_on_null_list)$/;"	f	file:
TEST	libft/test/src/suite_ft_dlstinsert.c	/^static TEST(when_used_on_second_elem_of_tree_elem_list)$/;"	f	file:
TEST	libft/test/src/suite_ft_dlstinsert.c	/^static TEST(when_used_on_second_elem_of_two_elem_list)$/;"	f	file:
TEST	libft/test/src/suite_ft_dlstnew.c	/^static TEST(when_dlistnew_content_and_content_size_should_be_the_same)$/;"	f	file:
TEST	libft/test/src/suite_ft_lstlen.c	/^static TEST(ft_lstlen_on_empty_list_should_return_zero)$/;"	f	file:
TEST	libft/test/src/suite_ft_lstlen.c	/^static TEST(ft_lstlen_should_return_list_len)$/;"	f	file:
TEST	libft/test/src/suite_ft_lstlen.c	/^static TEST(random_test)$/;"	f	file:
TEST	libft/test/src/suite_ft_strchr.c	/^static TEST(when_c_is_first_char_of_string)$/;"	f	file:
TEST	libft/test/src/suite_ft_strchr.c	/^static TEST(when_c_is_in_string)$/;"	f	file:
TEST	libft/test/src/suite_ft_strchr.c	/^static TEST(when_c_is_last_char_of_string)$/;"	f	file:
TEST	libft/test/src/suite_ft_strchr.c	/^static TEST(when_c_is_not_in_string)$/;"	f	file:
TEST	libft/test/src/suite_ft_strchr.c	/^static TEST(when_c_is_null)$/;"	f	file:
TEST	libft/test/src/suite_ft_strchr.c	/^static TEST(when_s_is_empty)$/;"	f	file:
TEST	libft/test/src/suite_ft_strchr.c	/^static TEST(when_s_is_empty_and_c_is_null)$/;"	f	file:
TEST_H	libft/test/src/test.h	/^# define TEST_H$/;"	d
TEST_SUITE	libft/test/src/suite_ft_atoi_base.c	/^TEST_SUITE(suite_ft_atoi_base)$/;"	f
TEST_SUITE	libft/test/src/suite_ft_dlstaddback.c	/^TEST_SUITE(suite_ft_dlstaddback)$/;"	f
TEST_SUITE	libft/test/src/suite_ft_dlstinsert.c	/^TEST_SUITE(suite_ft_dlstinsert)$/;"	f
TEST_SUITE	libft/test/src/suite_ft_dlstnew.c	/^TEST_SUITE(suite_ft_dlstnew)$/;"	f
TEST_SUITE	libft/test/src/suite_ft_lstlen.c	/^TEST_SUITE(suite_ft_lstlen)$/;"	f
TEST_SUITE	libft/test/src/suite_ft_strchr.c	/^TEST_SUITE(suite_ft_strchr)$/;"	f
addnewtoenv	libft/src/ft_putenv.c	/^static int		addnewtoenv(char *string, int i, int *first)$/;"	f	file:
apos	libft/src/ft_printf/ft_printf.h	/^	int			apos;$/;"	m	struct:s_flags
base_is_valid	libft/src/ft_atoi_base.c	/^static  int base_is_valid(char *b)$/;"	f	file:
beg	libft/src/ft_printf/ft_printf.h	/^	va_list		beg;$/;"	m	struct:s_env
btree_apply_by_level	libft/src/btree_apply_by_level.c	/^void	btree_apply_by_level(t_btree *root, void (*applyf)(void *item,$/;"	f
btree_apply_infix	libft/src/btree_apply_infix.c	/^void	btree_apply_infix(t_btree *root, void (*applyf)(void *))$/;"	f
btree_apply_infix_rev	libft/src/btree_apply_infix_rev.c	/^void	btree_apply_infix_rev(t_btree *root, void (*applyf)(void *))$/;"	f
btree_apply_prefix	libft/src/btree_apply_prefix.c	/^void	btree_apply_prefix(t_btree *root, void (*applyf)(void *))$/;"	f
btree_apply_suffix	libft/src/btree_apply_suffix.c	/^void	btree_apply_suffix(t_btree *root, void (*applyf)(void *))$/;"	f
btree_create_node	libft/src/btree_create_node.c	/^t_btree		*btree_create_node(void *item)$/;"	f
btree_insert_data	libft/src/btree_insert_data.c	/^void	btree_insert_data(t_btree **root, void *item,$/;"	f
btree_level_count	libft/src/btree_level_count.c	/^int		btree_level_count(t_btree *root)$/;"	f
btree_search_item	libft/src/btree_search_item.c	/^void		*btree_search_item(t_btree *root, void *data_ref,$/;"	f
buf	libft/src/ft_printf/ft_printf.h	/^	char		buf[BUFF_SIZE];$/;"	m	struct:s_env
cast_float_nbr	libft/src/ft_printf/float_to_str.c	/^static double	cast_float_nbr(va_list *ap, t_conv *conv)$/;"	f	file:
cast_signed_nbr	libft/src/ft_printf/nbr_to_str.c	/^static intmax_t		cast_signed_nbr(va_list *ap, t_conv *conv)$/;"	f	file:
cast_unsigned_nbr	libft/src/ft_printf/nbr_to_str.c	/^static uintmax_t	cast_unsigned_nbr(va_list *ap, t_conv *conv)$/;"	f	file:
change_fd	libft/src/ft_printf/conv_to_buffer.c	/^static int	change_fd(va_list *ap, t_env *env)$/;"	f	file:
chars_to_str	libft/src/ft_printf/chars_to_str.c	/^char				*chars_to_str(va_list *ap, t_env *env)$/;"	f
color	libft/include/libft.h	/^	enum e_rb_color		color;$/;"	m	struct:s_rb_node	typeref:enum:s_rb_node::e_rb_color
compute_checksum	src/main.c	/^void compute_checksum(struct icmp *hdr)$/;"	f
content	libft/include/libft.h	/^	void				*content;$/;"	m	struct:s_dlist
content	libft/include/libft.h	/^	void				*content;$/;"	m	struct:s_list
content_size	libft/include/libft.h	/^	size_t				content_size;$/;"	m	struct:s_dlist
content_size	libft/include/libft.h	/^	size_t				content_size;$/;"	m	struct:s_list
conv	libft/src/ft_printf/ft_printf.h	/^	t_conv		*conv;$/;"	m	struct:s_env
conv_to_buffer	libft/src/ft_printf/conv_to_buffer.c	/^int			conv_to_buffer(va_list *ap, t_env *env)$/;"	f
convnew	libft/src/ft_printf/init.c	/^t_conv		*convnew()$/;"	f
create_node	libft/src/rb_insert.c	/^static t_rb_node	*create_node(void *item)$/;"	f	file:
e_lenght	libft/src/ft_printf/ft_printf.h	/^typedef enum	e_lenght$/;"	g
e_rb_color	libft/include/libft.h	/^enum					e_rb_color$/;"	g
envnew	libft/src/ft_printf/init.c	/^t_env		*envnew(const char *format)$/;"	f
fd	libft/src/ft_printf/ft_printf.h	/^	int			fd;$/;"	m	struct:s_env
flags	libft/src/ft_printf/ft_printf.h	/^	t_flags		*flags;$/;"	m	struct:s_conv
flagsnew	libft/src/ft_printf/init.c	/^t_flags		*flagsnew()$/;"	f
float_to_str	libft/src/ft_printf/float_to_str.c	/^char			*float_to_str(va_list *ap, t_env *env)$/;"	f
form	libft/src/ft_printf/ft_printf.h	/^	const char	*form;$/;"	m	struct:s_env
ft_atoi	libft/src/ft_atoi.c	/^int		ft_atoi(const char *str)$/;"	f
ft_atoi_base	libft/src/ft_atoi_base.c	/^int			ft_atoi_base(char *str, char *base)$/;"	f
ft_bzero	libft/src/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_dlstaddback	libft/src/ft_dlstaddback.c	/^void	ft_dlstaddback(t_dlist **adlst, t_dlist *new)$/;"	f
ft_dlstinsert	libft/src/ft_dlstinsert.c	/^void	ft_dlstinsert(t_dlist **adlst, t_dlist *new)$/;"	f
ft_dlstnew	libft/src/ft_dlstnew.c	/^t_dlist		*ft_dlstnew(void const *content, size_t content_size)$/;"	f
ft_dlstnewnocpy	libft/src/ft_dlstnewnocpy.c	/^t_dlist		*ft_dlstnewnocpy(void *content, size_t content_size)$/;"	f
ft_dlstremove	libft/src/ft_dlstremove.c	/^void	ft_dlstremove(t_dlist **adlst, t_dlist *elem)$/;"	f
ft_ftoa	libft/src/ft_ftoa.c	/^char		*ft_ftoa(long double nbr, int preci)$/;"	f
ft_getcol	libft/src/ft_getcol.c	/^int					ft_getcol(void)$/;"	f
ft_getenv	libft/src/ft_getenv.c	/^char			*ft_getenv(const char *name)$/;"	f
ft_isalnum	libft/src/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/src/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/src/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isblank	libft/src/ft_isblank.c	/^int	ft_isblank(int c)$/;"	f
ft_isdigit	libft/src/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isdir	libft/src/ft_isdir.c	/^int				ft_isdir(char const *path)$/;"	f
ft_isescape	libft/src/ft_isescape.c	/^int	ft_isescape(int c)$/;"	f
ft_isprint	libft/src/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	libft/src/ft_isspace.c	/^int	ft_isspace(int c)$/;"	f
ft_itoa	libft/src/ft_itoa.c	/^char		*ft_itoa(int n)$/;"	f
ft_itoa_base	libft/src/ft_itoa_base.c	/^char		*ft_itoa_base(uintmax_t n, int base)$/;"	f
ft_lstadd	libft/src/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstaddback	libft/src/ft_lstaddback.c	/^void	ft_lstaddback(t_list **alst, t_list *new)$/;"	f
ft_lstdel	libft/src/ft_lstdel.c	/^void		ft_lstdel(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstdelone	libft/src/ft_lstdelone.c	/^void		ft_lstdelone(t_list **alst, void (*del)(void*, size_t))$/;"	f
ft_lstiter	libft/src/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstlen	libft/src/ft_lstlen.c	/^int	ft_lstlen(t_list *lst)$/;"	f
ft_lstmap	libft/src/ft_lstmap.c	/^t_list		*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	libft/src/ft_lstnew.c	/^t_list		*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_lstnewnocpy	libft/src/ft_lstnewnocpy.c	/^t_list		*ft_lstnewnocpy(void *content, size_t content_size)$/;"	f
ft_lstsort	libft/src/ft_lstsort.c	/^t_list		*ft_lstsort(t_list *beg, int cmp(t_list *a, t_list *b))$/;"	f
ft_memalloc	libft/src/ft_memalloc.c	/^void		*ft_memalloc(size_t size)$/;"	f
ft_memccpy	libft/src/ft_memccpy.c	/^void		*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/src/ft_memchr.c	/^void				*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/src/ft_memcmp.c	/^int			ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/src/ft_memcpy.c	/^void		*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memcpy_rev	libft/src/ft_memmove.c	/^static void	*ft_memcpy_rev(void *dst, const void *src, size_t n)$/;"	f	file:
ft_memdel	libft/src/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f
ft_memmove	libft/src/ft_memmove.c	/^void		*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memrealloc	libft/src/ft_memrealloc.c	/^void		*ft_memrealloc(void *ptr, size_t size)$/;"	f
ft_memset	libft/src/ft_memset.c	/^void		*ft_memset(void *b, int c, size_t len)$/;"	f
ft_nbrlen	libft/src/ft_nbrlen.c	/^int		ft_nbrlen(int n)$/;"	f
ft_nbrlen_base	libft/src/ft_nbrlen_base.c	/^int	ft_nbrlen_base(uintmax_t n, int base)$/;"	f
ft_printf	libft/src/ft_printf/ft_printf.c	/^int				ft_printf(const char *format, ...)$/;"	f
ft_ptr_align	libft/src/ft_ptr_align.c	/^void	*ft_ptr_align(void *ptr, size_t align)$/;"	f
ft_putchar	libft/src/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	libft/src/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libft/src/ft_putendl.c	/^void	ft_putendl(char const *s)$/;"	f
ft_putendl_fd	libft/src/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putenv	libft/src/ft_putenv.c	/^int				ft_putenv(char *string)$/;"	f
ft_putnbr	libft/src/ft_putnbr.c	/^void	ft_putnbr(int n)$/;"	f
ft_putnbr_base	libft/src/ft_putnbr_base.c	/^void		ft_putnbr_base(uintmax_t n, int base)$/;"	f
ft_putnbr_fd	libft/src/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/src/ft_putstr.c	/^void	ft_putstr(char const *s)$/;"	f
ft_putstr_fd	libft/src/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_puttab	libft/src/ft_puttab.c	/^void	ft_puttab(char **tab)$/;"	f
ft_puttab_fd	libft/src/ft_puttab_fd.c	/^void	ft_puttab_fd(char **tab, int fd)$/;"	f
ft_recursive_power	libft/src/ft_recursive_power.c	/^intmax_t	ft_recursive_power(intmax_t nb, int power)$/;"	f
ft_setenv	libft/src/ft_setenv.c	/^int				ft_setenv(const char *name, const char *value, int overwrite)$/;"	f
ft_strcapitalize	libft/src/ft_strcapitalize.c	/^char	*ft_strcapitalize(char *s)$/;"	f
ft_strcat	libft/src/ft_strcat.c	/^char		*ft_strcat(char *s1, const char *s2)$/;"	f
ft_strchr	libft/src/ft_strchr.c	/^char		*ft_strchr(const char *s, int c)$/;"	f
ft_strcjoin	libft/src/ft_strcjoin.c	/^char		*ft_strcjoin(char const *s1, char const *s2, char c)$/;"	f
ft_strclen	libft/src/ft_strclen.c	/^size_t			ft_strclen(char const *s, char c)$/;"	f
ft_strclr	libft/src/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f
ft_strcmp	libft/src/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	libft/src/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdel	libft/src/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	libft/src/ft_strdup.c	/^char		*ft_strdup(const char *s1)$/;"	f
ft_strequ	libft/src/ft_strequ.c	/^int		ft_strequ(char const *s1, char const *s2)$/;"	f
ft_striter	libft/src/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *))$/;"	f
ft_striteri	libft/src/ft_striteri.c	/^void		ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	libft/src/ft_strjoin.c	/^char		*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/src/ft_strlcat.c	/^size_t		ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/src/ft_strlcpy.c	/^size_t			ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/src/ft_strlen.c	/^size_t			ft_strlen(const char *s)$/;"	f
ft_strlowcase	libft/src/ft_strlowcase.c	/^char		*ft_strlowcase(char *s)$/;"	f
ft_strmap	libft/src/ft_strmap.c	/^char		*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	libft/src/ft_strmapi.c	/^char		*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncat	libft/src/ft_strncat.c	/^char		*ft_strncat(char *s1, const char *s2, size_t n)$/;"	f
ft_strncmp	libft/src/ft_strncmp.c	/^int			ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libft/src/ft_strncpy.c	/^char		*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f
ft_strndup	libft/src/ft_strndup.c	/^char		*ft_strndup(const char *s1, size_t n)$/;"	f
ft_strnequ	libft/src/ft_strnequ.c	/^int	ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	libft/src/ft_strnew.c	/^char		*ft_strnew(size_t size)$/;"	f
ft_strnstr	libft/src/ft_strnstr.c	/^char		*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f
ft_strrchr	libft/src/ft_strrchr.c	/^char			*ft_strrchr(const char *s, int c)$/;"	f
ft_strrealloc	libft/src/ft_strrealloc.c	/^char		*ft_strrealloc(char *str, size_t size)$/;"	f
ft_strrev	libft/src/ft_strrev.c	/^char		*ft_strrev(char *s)$/;"	f
ft_strsplit	libft/src/ft_strsplit.c	/^char		**ft_strsplit(char const *s, char c)$/;"	f
ft_strstr	libft/src/ft_strstr.c	/^char	*ft_strstr(const char *big, const char *little)$/;"	f
ft_strsub	libft/src/ft_strsub.c	/^char		*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtrim	libft/src/ft_strtrim.c	/^char			*ft_strtrim(char const *s)$/;"	f
ft_strupcase	libft/src/ft_strupcase.c	/^char		*ft_strupcase(char *s)$/;"	f
ft_swap	libft/src/ft_swap.c	/^void		ft_swap(void **a, void **b)$/;"	f
ft_tabdel	libft/src/ft_tabdel.c	/^void		ft_tabdel(char ***atab)$/;"	f
ft_tabdup	libft/src/ft_tabdup.c	/^char		**ft_tabdup(char **tab)$/;"	f
ft_tablen	libft/src/ft_tablen.c	/^int			ft_tablen(char **tab)$/;"	f
ft_tolower	libft/src/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/src/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_unsetenv	libft/src/ft_unsetenv.c	/^int				ft_unsetenv(const char *name)$/;"	f
ft_wcharlen	libft/src/ft_wcharlen.c	/^int	ft_wcharlen(wint_t wint)$/;"	f
ft_wchartoa	libft/src/ft_wchartoa.c	/^char		*ft_wchartoa(wint_t wint)$/;"	f
ft_wordcount	libft/src/ft_wordcount.c	/^int		ft_wordcount(char const *str, char c)$/;"	f
ft_wstrlen	libft/src/ft_wstrlen.c	/^int			ft_wstrlen(wchar_t *wstr)$/;"	f
ft_wstrtoa	libft/src/ft_wstrtoa.c	/^char	*ft_wstrtoa(wchar_t *wstr)$/;"	f
ftoa_fix	libft/src/ft_ftoa.c	/^static char	*ftoa_fix(int preci, int len, char *tmp)$/;"	f	file:
get_2wchar	libft/src/ft_wchartoa.c	/^static char	*get_2wchar(char *str, wint_t wint)$/;"	f	file:
get_3wchar	libft/src/ft_wchartoa.c	/^static char	*get_3wchar(char *str, wint_t wint)$/;"	f	file:
get_4wchar	libft/src/ft_wchartoa.c	/^static char	*get_4wchar(char *str, wint_t wint)$/;"	f	file:
get_color	libft/src/ft_printf/normal_to_buffer.c	/^static void		get_color(t_env *env)$/;"	f	file:
get_conv	libft/src/ft_printf/get_conv.c	/^void		get_conv(va_list *ap, t_env *env)$/;"	f
get_escapechar	libft/src/ft_printf/chars_to_str.c	/^static char			get_escapechar(int c)$/;"	f	file:
get_escapestr	libft/src/ft_printf/chars_to_str.c	/^static char			*get_escapestr(char *str)$/;"	f	file:
get_flags	libft/src/ft_printf/get_conv.c	/^static void	get_flags(t_env *env)$/;"	f	file:
get_id	libft/src/ft_printf/get_id.c	/^int				get_id(t_env *env)$/;"	f
get_len	libft/src/ft_printf/get_conv.c	/^static void	get_len(t_env *env)$/;"	f	file:
get_lenght	libft/src/btree_level_count.c	/^int		get_lenght(t_btree *root, int lvl, int maxlvl)$/;"	f
get_next_line	libft/src/get_next_line/get_next_line.c	/^int					get_next_line(const int fd, char **line)$/;"	f
get_preci	libft/src/ft_printf/get_conv.c	/^static void	get_preci(va_list *ap, t_env *env)$/;"	f	file:
get_str	libft/src/ft_printf/chars_to_str.c	/^static char			*get_str(va_list *ap)$/;"	f	file:
get_width	libft/src/ft_printf/get_conv.c	/^static void	get_width(va_list *ap, t_env *env)$/;"	f	file:
get_wstr	libft/src/ft_printf/chars_to_str.c	/^static char			*get_wstr(va_list *ap)$/;"	f	file:
getpaddinglen	libft/src/ft_printf/putconv_to_buffer.c	/^static int		getpaddinglen(char *str, t_env *env)$/;"	f	file:
goto_arg	libft/src/ft_printf/goto_arg.c	/^void		goto_arg(va_list *ap, int id, t_env *env)$/;"	f
h	libft/src/ft_printf/ft_printf.h	/^	NONE, hh, h, l, ll, j, t, z, q, L$/;"	e	enum:e_lenght
hash	libft/src/ft_printf/ft_printf.h	/^	int			hash;$/;"	m	struct:s_flags
hash_to_buffer	libft/src/ft_printf/putconv_to_buffer.c	/^static void		hash_to_buffer(t_env *env)$/;"	f	file:
hh	libft/src/ft_printf/ft_printf.h	/^	NONE, hh, h, l, ll, j, t, z, q, L$/;"	e	enum:e_lenght
i	libft/src/ft_printf/ft_printf.h	/^	int			i;$/;"	m	struct:s_env
id	libft/src/ft_printf/ft_printf.h	/^	int			id;$/;"	m	struct:s_conv
initialize	libft/src/get_next_line/get_next_line.c	/^static t_list		*initialize(int fd, t_list **beg, char **tmp, int *num)$/;"	f	file:
invalidespec	libft/src/ft_printf/conv_to_buffer.c	/^static char	*invalidespec(char *str, t_env *env)$/;"	f	file:
isbegwchar	libft/src/ft_printf/toolkit.c	/^int	isbegwchar(int c)$/;"	f
isflag	libft/src/ft_printf/toolkit.c	/^int	isflag(int c)$/;"	f
islenght	libft/src/ft_printf/toolkit.c	/^int	islenght(int c)$/;"	f
ismidwchar	libft/src/ft_printf/toolkit.c	/^int	ismidwchar(int c)$/;"	f
istype	libft/src/ft_printf/toolkit.c	/^int	istype(int c)$/;"	f
item	libft/include/libft.h	/^	void				*item;$/;"	m	struct:s_btree
item	libft/include/libft.h	/^	void				*item;$/;"	m	struct:s_rb_node
j	libft/src/ft_printf/ft_printf.h	/^	NONE, hh, h, l, ll, j, t, z, q, L$/;"	e	enum:e_lenght
j	libft/src/ft_printf/ft_printf.h	/^	int			j;$/;"	m	struct:s_env
l	libft/src/ft_printf/ft_printf.h	/^	NONE, hh, h, l, ll, j, t, z, q, L$/;"	e	enum:e_lenght
left	libft/include/libft.h	/^	struct s_btree		*left;$/;"	m	struct:s_btree	typeref:struct:s_btree::s_btree
left	libft/include/libft.h	/^	struct s_rb_node	*left;$/;"	m	struct:s_rb_node	typeref:struct:s_rb_node::s_rb_node
len	libft/src/ft_printf/ft_printf.h	/^	t_lenght	len;$/;"	m	struct:s_conv
ll	libft/src/ft_printf/ft_printf.h	/^	NONE, hh, h, l, ll, j, t, z, q, L$/;"	e	enum:e_lenght
main	libft/test/src/main.c	/^int main(int argc, char **argv)$/;"	f
main	src/main.c	/^int main(int argc, char *argv[])$/;"	f
min	libft/src/ft_printf/ft_printf.h	/^	int			min;$/;"	m	struct:s_flags
nbr_to_str	libft/src/ft_printf/nbr_to_str.c	/^char				*nbr_to_str(va_list *ap, t_env *env)$/;"	f
next	libft/include/libft.h	/^	struct s_dlist		*next;$/;"	m	struct:s_dlist	typeref:struct:s_dlist::s_dlist
next	libft/include/libft.h	/^	struct s_list		*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
normal_to_buffer	libft/src/ft_printf/normal_to_buffer.c	/^void			normal_to_buffer(t_env *env)$/;"	f
null_nbr_fix	libft/src/ft_printf/nbr_to_str.c	/^static void			null_nbr_fix(t_conv *conv)$/;"	f	file:
padding_to_buffer	libft/src/ft_printf/putconv_to_buffer.c	/^static void		padding_to_buffer(int len, char c, t_env *env)$/;"	f	file:
parent	libft/include/libft.h	/^	struct s_rb_node	*parent;$/;"	m	struct:s_rb_node	typeref:struct:s_rb_node::s_rb_node
plus	libft/src/ft_printf/ft_printf.h	/^	int			plus;$/;"	m	struct:s_flags
preci	libft/src/ft_printf/ft_printf.h	/^	int			preci;$/;"	m	struct:s_conv
prev	libft/include/libft.h	/^	struct s_dlist		*prev;$/;"	m	struct:s_dlist	typeref:struct:s_dlist::s_dlist
print	libft/src/ft_printf/ft_printf.c	/^static int		print(va_list *ap, t_env *env)$/;"	f	file:
print_buffer	libft/src/ft_printf/buffering.c	/^void	print_buffer(t_env *env)$/;"	f
print_info	libft/Makefile	/^define print_info$/;"	m
printed_to_ptr	libft/src/ft_printf/conv_to_buffer.c	/^static int	printed_to_ptr(va_list *ap, t_env *env)$/;"	f	file:
ptr	libft/src/ft_printf/ft_printf.h	/^	void		*ptr;$/;"	m	struct:s_conv
putchar_to_buffer	libft/src/ft_printf/buffering.c	/^void	putchar_to_buffer(char c, t_env *env)$/;"	f
putconv_to_buffer	libft/src/ft_printf/putconv_to_buffer.c	/^int				putconv_to_buffer(char *str, t_env *env)$/;"	f
putstr_to_buffer	libft/src/ft_printf/buffering.c	/^void	putstr_to_buffer(char *str, t_env *env)$/;"	f
q	libft/src/ft_printf/ft_printf.h	/^	NONE, hh, h, l, ll, j, t, z, q, L$/;"	e	enum:e_lenght
rb_delete	libft/src/rb_delete.c	/^void	rb_delete(t_rb_node **root, void (*freef)(void *))$/;"	f
rb_insert	libft/src/rb_insert.c	/^void				rb_insert(struct s_rb_node **root, void *item,$/;"	f
rb_remove	libft/src/rb_remove.c	/^void			rb_remove(struct s_rb_node **root, void *item,$/;"	f
ret	libft/src/ft_printf/ft_printf.h	/^	int			ret;$/;"	m	struct:s_env
right	libft/include/libft.h	/^	struct s_btree		*right;$/;"	m	struct:s_btree	typeref:struct:s_btree::s_btree
right	libft/include/libft.h	/^	struct s_rb_node	*right;$/;"	m	struct:s_rb_node	typeref:struct:s_rb_node::s_rb_node
s_btree	libft/include/libft.h	/^typedef struct			s_btree$/;"	s
s_conv	libft/src/ft_printf/ft_printf.h	/^typedef struct	s_conv$/;"	s
s_dlist	libft/include/libft.h	/^typedef	struct			s_dlist$/;"	s
s_env	libft/src/ft_printf/ft_printf.h	/^typedef struct	s_env$/;"	s
s_flags	libft/src/ft_printf/ft_printf.h	/^typedef struct	s_flags$/;"	s
s_list	libft/include/libft.h	/^typedef	struct			s_list$/;"	s
s_rb_node	libft/include/libft.h	/^typedef struct			s_rb_node$/;"	s
set_apostrophe	libft/src/ft_printf/set_apostrophe.c	/^char		*set_apostrophe(char *str, t_env *env)$/;"	f
set_float_preci	libft/src/ft_printf/set_precision.c	/^static char	*set_float_preci(char *new, char *str, t_env *env)$/;"	f	file:
set_float_zero_preci	libft/src/ft_printf/set_precision.c	/^static char	*set_float_zero_preci(char *str, int i, t_env *env)$/;"	f	file:
set_nbr_preci	libft/src/ft_printf/set_precision.c	/^static char	*set_nbr_preci(char *new, char *str, t_env *env)$/;"	f	file:
set_precision	libft/src/ft_printf/set_precision.c	/^char		*set_precision(char *str, t_env *env)$/;"	f
set_str_preci	libft/src/ft_printf/set_precision.c	/^static char	*set_str_preci(char *new, char *str, t_env *env)$/;"	f	file:
setapos_to_intpart	libft/src/ft_printf/set_apostrophe.c	/^static char	*setapos_to_intpart(char *str, t_env *env)$/;"	f	file:
sign_to_buffer	libft/src/ft_printf/putconv_to_buffer.c	/^static void		sign_to_buffer(t_env *env)$/;"	f	file:
simplify_conv	libft/src/ft_printf/conv_to_buffer.c	/^static void	simplify_conv(t_conv *conv)$/;"	f	file:
space	libft/src/ft_printf/ft_printf.h	/^	int			space;$/;"	m	struct:s_flags
suite_ft_atoi_base	libft/test/src/test.h	/^TEST_SUITE(suite_ft_atoi_base);$/;"	v
suite_ft_dlstaddback	libft/test/src/test.h	/^TEST_SUITE(suite_ft_dlstaddback);$/;"	v
suite_ft_dlstinsert	libft/test/src/test.h	/^TEST_SUITE(suite_ft_dlstinsert);$/;"	v
suite_ft_dlstnew	libft/test/src/test.h	/^TEST_SUITE(suite_ft_dlstnew);$/;"	v
suite_ft_lstlen	libft/test/src/test.h	/^TEST_SUITE(suite_ft_lstlen);$/;"	v
suite_ft_strchr	libft/test/src/test.h	/^TEST_SUITE(suite_ft_strchr);$/;"	v
t	libft/src/ft_printf/ft_printf.h	/^	NONE, hh, h, l, ll, j, t, z, q, L$/;"	e	enum:e_lenght
t_btree	libft/include/libft.h	/^}						t_btree;$/;"	t	typeref:struct:s_btree
t_conv	libft/src/ft_printf/ft_printf.h	/^}				t_conv;$/;"	t	typeref:struct:s_conv
t_dlist	libft/include/libft.h	/^}						t_dlist;$/;"	t	typeref:struct:s_dlist
t_env	libft/src/ft_printf/ft_printf.h	/^}				t_env;$/;"	t	typeref:struct:s_env
t_flags	libft/src/ft_printf/ft_printf.h	/^}				t_flags;$/;"	t	typeref:struct:s_flags
t_lenght	libft/src/ft_printf/ft_printf.h	/^}				t_lenght;$/;"	t	typeref:enum:e_lenght
t_list	libft/include/libft.h	/^}						t_list;$/;"	t	typeref:struct:s_list
t_rb_node	libft/include/libft.h	/^}						t_rb_node;$/;"	t	typeref:struct:s_rb_node
type	libft/src/ft_printf/ft_printf.h	/^	char		type;$/;"	m	struct:s_conv
width	libft/src/ft_printf/ft_printf.h	/^	int			width;$/;"	m	struct:s_conv
z	libft/src/ft_printf/ft_printf.h	/^	NONE, hh, h, l, ll, j, t, z, q, L$/;"	e	enum:e_lenght
zero	libft/src/ft_printf/ft_printf.h	/^	int			zero;$/;"	m	struct:s_flags
